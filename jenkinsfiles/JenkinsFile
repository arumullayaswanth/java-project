pipeline {
    agent any 
    tools {
        jdk 'jdk'
    }
    environment  {
        SCANNER_HOME= tool 'sonar-scanner'                // replace your sonarqube scanner name
        SONARQUBE_SERVER  = 'sonar-server'                // replace your Jenkins global SonarQube server name (Manage Jenkins > Configure System)
        SONAR_TOKEN_CRED  = 'sonarqube-token'            // Jenkins secret text credential id
        OWASP_CHECK = "DP-check"                         // replace name your Dependency-check installation 
        AWS_ACCOUNT_ID = '242201296943'                   // replace AWS account ID
        AWS_ECR_REPO_NAME = 'javaapp'                      //replace ECR repository name
        AWS_DEFAULT_REGION = 'us-east-1'                 // replace AWS region
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
        GIT_REPO_NAME = "java-project"      // replace your github rep name
        GIT_EMAIL = "yaswanth.arumulla@gmail.com"    //replacr your email id
        GIT_USER_NAME = "arumullayaswanth"           // replace your user name
        YAML_FILE = "deployment.yml"
    }
    stages {
        // no change in this stage
        stage('Cleaning Workspace') {
            steps {
                cleanWs()         // Clears the workspace before starting the build (removes old files)
            }
        }

        // change rep name 
        stage('Checkout from Git') {
            steps {
                // Clones the 'master' branch of your GitHub repository
                git branch: 'master', url: 'https://github.com/arumullayaswanth/java-project.git'
            }
        }

        // no change in this stage
        stage("List Files") {
            steps {
                sh 'ls -la' // verfy files after checkout
            }
        }
        // no change in this stage
        stage('Maven Build') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn clean install'
                }
            }
        }

        // Unit Test Report
        stage('Unit Test Report') {
            steps {
                dir('spring-boot-app') {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        // Code Coverage with JaCoCo
        stage('Code Coverage') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn jacoco:prepare-agent test jacoco:report'
                    jacoco execPattern: '**/target/jacoco.exec',
                          classPattern: '**/target/classes',
                          sourcePattern: '**/src/main/java'
                }
            }
        }

        // Package Artifact (JAR)
        stage('Package Artifact') {
            steps {
                dir('spring-boot-app') {
                    sh 'mvn package -DskipTests'
                }
            }
        }

        // Archive Build Artifact
        stage('Archive Artifact') {
            steps {
                archiveArtifacts artifacts: 'spring-boot-app/target/*.jar', fingerprint: true
            }
        }

        // no change in this stage Except dir name=dir('javaapp')
        stage('Sonarqube Analysis') {
            steps {
                dir('spring-boot-app') {
                    withSonarQubeEnv(env.SONARQUBE_SERVER) {
                        // change your prohect name my project name is javaapp
                        sh ''' 
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectName=javaapp \
                        -Dsonar.projectKey=javaapp 
                        '''
                    }
                }
            }
        }

        // no change in this stage
        stage('Quality Check') {
            steps {
                script {
                    // This requires the "Quality Gates" webhook to be configured in SonarQube
                    waitForQualityGate abortPipeline: false, credentialsId: env.SONAR_TOKEN_CRED 
                }
            }
        }
        
        // this step it will take 45 
        // no change in this stage Except dir name=dir('frontend')
        stage('OWASP FS Scan') {
            steps {
                dir('spring-boot-app') {   // Ensure you are scanning the right folder
                    dependencyCheck additionalArguments: '--scan . --disableYarnAudit --disableNodeAudit', odcInstallation: env.OWASP_CHECK
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        // no change in this stage
        stage('Trivy File Scan') {
            steps {
                dir('spring-boot-app') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        // no change in this stage Except dir name=dir('spring-boot-app'
        stage("Docker Image Build") {
            steps {
                script {
                    dir('spring-boot-app') {
                            sh 'docker system prune -f'              // Removes unused Docker data (containers, images, etc.)
                            sh 'docker container prune -f'           // Specifically removes all stopped containers
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'   // Builds Docker image with the tag 'frontend' from Dockerfile in current dir
                    }
                }
            }
        }

        // no change in this stage
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME}:latest ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }

        // no change in this stage
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        // change rep name
        stage('Checkout Code') {
            steps {
                git branch: 'master', url: 'https://github.com/arumullayaswanth/java-project.git'
            }
        }

        // no change in this stage Except dir name=dir('kubernetes-files')
        stage('Update Deployment file') {
            steps {
                dir('kubernetes-files') {
                    sh 'ls -la'
                    withCredentials([string(credentialsId: 'my-git-pattoken', variable: 'git_token')]) {
                        sh '''
                            git config user.email "${GIT_EMAIL}"
                            git config user.name "${GIT_USER_NAME}"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER

                            # push this image to your git hub
                            sed -i "s#image:.*#image: ${REPOSITORY_URI}/${AWS_ECR_REPO_NAME}:$BUILD_NUMBER#g" ${YAML_FILE}

                            git add ${YAML_FILE}
                            git commit -m "Update ${AWS_ECR_REPO_NAME} Image to version \${BUILD_NUMBER}"
                            git push https://${git_token}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
        
                        '''
                    }
                }
            }
        }
        stage('Notify Slack') {
            when {
                expression { return env.SLACK_WEBHOOK_URL != null }
            }
            steps {
                // Ensure required files exist or create dummy files
                sh 'if [ ! -f trivyfs.txt ]; then echo "No trivyfs report found" > trivyfs.txt; fi'
                sh 'if [ ! -f trivyimage.txt ]; then echo "No trivy image report found" > trivyimage.txt; fi'
                sh 'if [ ! -f dependency-check-report.xml ]; then echo "No dependency check report found" > dependency-check-report.xml; fi'

                withCredentials([string(credentialsId: 'SLACK_WEBHOOK_URL', variable: 'SLACK_WEBHOOK_URL')]) {
                    script {
                        def messageBlock = currentBuild.currentResult == 'SUCCESS' ? """
                            {
                                "type": "header",
                                "text": { "type": "plain_text", "text": "ü¶ã Deployment Complete! ü¶ã" }
                            },
                            {
                                "type": "section",
                                "text": {
                                    "type": "mrkdwn",
                                    "text": ":white_check_mark: *Build Status:* `SUCCESS`\n*Build Number:* #${BUILD_NUMBER}\n*Environment:* _Production_\n*Service:* *demo-service*"
                                },
                                "accessory": {
                                    "type": "image",
                                    "image_url": "https://media.giphy.com/media/xThtam4bZsG4j6hGzK/giphy.gif",
                                    "alt_text": "butterfly"
                                }
                            }
                        """ : """
                            {
                                "type": "header",
                                "text": { "type": "plain_text", "text": "‚ùå Deployment Failed ‚ùå" }
                            },
                            {
                                "type": "section",
                                "text": {
                                    "type": "mrkdwn",
                                    "text": ":x: *Build Status:* `FAILURE`\n*Build Number:* #${BUILD_NUMBER}\n*Environment:* _Production_\n*Service:* *demo-service*"
                                },
                                "accessory": {
                                    "type": "image",
                                    "image_url": "https://media.giphy.com/media/3o6Zt481isNVuQI1l6/giphy.gif",
                                    "alt_text": "failure"
                                }
                            }
                        """

                        def timestamp = new Date().format("yyyy-MM-dd HH:mm:ss")

                        sh """
                            curl -X POST -H 'Content-type: application/json' --data '{
                                "blocks": [
                                    ${messageBlock},
                                    {
                                        "type": "actions",
                                        "elements": [
                                            {
                                                "type": "button",
                                                "text": {
                                                    "type": "plain_text",
                                                    "text": "üîç View Logs"
                                                },
                                                "url": "${env.BUILD_URL}"
                                            },
                                            {
                                                "type": "button",
                                                "text": {
                                                    "type": "plain_text",
                                                    "text": "üåê View Dashboard"
                                                },
                                                "url": "https://your-monitoring-dashboard-url"
                                            }
                                        ]
                                    },
                                    { "type": "divider" },
                                    {
                                        "type": "context",
                                        "elements": [
                                            {
                                                "type": "mrkdwn",
                                                "text": "*My name is Yaswanth Reddy Arumulla* üíñ with ‚ú® fancy style!"
                                            },
                                            {
                                                "type": "plain_text",
                                                "text": "üõ† Triggered by: Jenkins CI/CD"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "context",
                                        "elements": [
                                            {
                                                "type": "plain_text",
                                                "text": "üìÖ Timestamp: ${timestamp}"
                                            }
                                        ]
                                    }
                                ]
                            }' $SLACK_WEBHOOK_URL
                        """
                    }
                }
            }
        }


    }
}